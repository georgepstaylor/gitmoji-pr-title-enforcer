---
name: Enforce Pull Request has a valid gitmoji prefix
description: This action enforces that a pull request title contains a valid gitmoji prefix

inputs:
  GITHUB_TOKEN:
    description: "GitHub token"
    required: true

runs:
  using: "composite"
  steps:
    - name: Get all Gitmoji's
      id: gitmojis
      shell: bash
      run: |
        curl -s https://gitmoji.dev/api/gitmojis | jq '.gitmojis' > gitmojis_all.json
        if [ ! -s gitmojis_all.json ]; then
          echo "::error::Failed to fetch gitmojis from API"
          exit 1
        fi
        cat gitmojis_all.json | jq '.[].emoji' > gitmojis.txt
        cat gitmojis_all.json | jq -r '.[].code' > gitmoji_codes.txt

    - name: Check if PR title has a valid gitmoji prefix
      id: check-gitmoji
      shell: bash
      run: |
        # Validate required files exist
        if [[ ! -f gitmojis.txt ]] || [[ ! -f gitmoji_codes.txt ]]; then
          echo "::error::Required gitmoji files not found. Previous step may have failed."
          exit 1
        fi
        
        gitmojis=$(cat gitmojis.txt)
        gitmoji_codes=$(cat gitmoji_codes.txt)
        pr_title="${{ github.event.pull_request.title }}"
        pr_prefix=$(echo "$pr_title" | cut -d ' ' -f1)
        is_valid=false
        if [[ $gitmojis == *"$pr_prefix"* ]]; then
          # Check for unicode gitmoji
          is_valid=true
        elif [[ $gitmoji_codes == *"$pr_prefix"* ]]; then
          # Check for gitmoji code
          is_valid=true
        fi
        echo "is_valid=$is_valid" >> $GITHUB_ENV

    - name: Handle PR Comment
      shell: bash
      run: |
        if [ -z "${{ github.event.pull_request.number }}" ]; then
          echo "::error::No pull request number found. This action should only run on pull request events."
          exit 1
        fi

        PR_NUMBER="${{ github.event.pull_request.number }}"
        REPO_API_URL="https://api.github.com/repos/${{ github.repository }}"
        COMMENTS_URL="${REPO_API_URL}/issues/${PR_NUMBER}/comments"

        # Create comment content
        if [ "${{ env.is_valid }}" == "true" ]; then
          COMMENT_BODY="# gitmoji validation\n\n:white_check_mark: Valid gitmoji prefix in PR title."
        else
          COMMENT_BODY="# gitmoji validation\n\n:x: Invalid gitmoji prefix in PR title. Please use a valid gitmoji prefix."
        fi

        # Find existing comment
        EXISTING_COMMENT=$(curl -s -H "Authorization: token ${{ inputs.GITHUB_TOKEN }}" "${COMMENTS_URL}" | \
          jq -r '.[] | select(.body | startswith("# gitmoji validation")) | .url' | head -n1)

        # Update or create comment
        if [ -n "$EXISTING_COMMENT" ]; then
          curl -s -X PATCH \
            -H "Authorization: token ${{ inputs.GITHUB_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d "{\"body\":\"${COMMENT_BODY}\"}" \
            "${EXISTING_COMMENT}"
        else
          curl -s -X POST \
            -H "Authorization: token ${{ inputs.GITHUB_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d "{\"body\":\"${COMMENT_BODY}\"}" \
            "${COMMENTS_URL}"
        fi

        # Exit with error if validation failed
        if [ "${{ env.is_valid }}" != "true" ]; then
          exit 1
        fi

branding:
  icon: "check-circle"
  color: "green"
